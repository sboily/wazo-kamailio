#!KAMAILIO

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########
#!define FLT_NATS 5

#!define FLAG_FROM_ASTERISK 10
#!define FLAG_FROM_PEER 11

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
debug=DBGLEVEL

#!ifdef WITH_DEBUG
log_stderror=yes
#!else
log_stderror=no
#!endif

memdbg=5
memlog=5

tcp_connection_lifetime=3604
tcp_accept_no_cl=yes
tcp_rd_buf_size=32768

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

route_locks_size=128

####### Modules Section ########

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "dispatcher.so"
loadmodule "sdpops.so"

#!ifdef WITH_RTPENGINE
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#------ Loading Mod Websocket-----------------------------------------#
#!ifdef WITH_WSS
loadmodule "xhttp.so"
loadmodule "websocket.so"
modparam("websocket", "keepalive_mechanism", 0)
modparam("websocket", "keepalive_timeout", 30)
modparam("websocket", "keepalive_processes", 1)
modparam("websocket", "keepalive_interval", 1)
modparam("websocket", "ping_application_data", "Wazo encourages you to keep alive")
modparam("websocket", "sub_protocols", 1)
#!endif

# ----------------- setting module-specific parameters ---------------
# # ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

# ----- sanity params -----
modparam("sanity", "autodrop", 0)

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
#!ifdef WITH_NAT
modparam("rr", "enable_double_rr", 2)
#!endif
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

# ----- dispatcher params ----
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list")
modparam("dispatcher", "xavp_dst", "_dsdst_")
modparam("dispatcher", "xavp_ctx", "_dsctx_")

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 32)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=300;")
#!endif

#!ifdef WITH_RTPENGINE
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", RTPENGINE)
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
#!endif

####### Routing Logic ########
request_route {
	xinfo("New incoming SIP request\n");

	# check src ip and set flag
	route(CHECK_SOURCE_IP);

	# per request initial checks
	route(REQINIT);

	if(isflagset(FLAG_FROM_PEER)) {
		if(is_present_hf("Contact") && $ct != "*") {
			set_contact_alias();
			if(is_method("REGISTER")) {
				msg_apply_changes();
				contact_param_encode("wks", SIPADDRINTERN);
			}
		}
	}

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
	        	xinfo("t_check_trans\n");
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

        route(DISPATCH);

	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}
	sl_send_reply("404","Not routing");
	exit;
}

# Wrapper for relaying requests
route[RELAY] {
	xinfo("RELAY\n");

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("REGISTER|INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("REGISTER|INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	if (!t_relay()) {
		sl_reply_error();
	}

	exit;
}

# Per SIP request initial checks
route[REQINIT] {
	force_rport();
	# no connect for sending replies
	set_reply_no_connect();

#!ifdef WITH_ANTIFLOOD
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(isflagset(FLAG_FROM_PEER)) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
	if($ua =~ "friendly|scanner|sipcli|sipvicious|VaxSIPUserAgent|pplsip") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		# $sht(ipban=>$si) = 1;
		exit;
	}

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(is_method("OPTIONS") && uri==myself) {
		if(uri =~ ";wks=") {
			return;
		}
		sl_send_reply("200","Keepalive");
		exit;
	}

	if(!sanity_check("17895", "7")) {
		xlog("Malformed SIP request from $si:$sp\n");
		exit;
	}

}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) {
		return;
	}

	contact_param_decode_ruri("wks");
	if (loose_route()) {
		handle_ruri_alias();
		if ( is_method("ACK|PRACK") ) {
			# ACK is forwarded statelessly
		        xinfo("Loose route: ACK|PRACK $ru");
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if ( is_method("ACK|PRACK") ) {
		xinfo("ACK|PRACK");
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
		        xinfo("Ignore ACK");
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	xinfo("In NATDETECT\n");
	if (nat_uac_test("19")) {
		setflag(FLT_NATS);
	}
#!endif
	return;
}

route[RTPENGINEREQ] {
	xinfo("RTPENGINEREQ ROUTE\n");
#!ifdef WITH_RTPENGINE
        if (proto == WS || proto == WSS) {
		$var(webrtc) = true;
	} else {
		$var(webrtc) = false;
	}
	if (is_method("INVITE|REFER|UPDATE") && has_body("application/sdp")) {
		if(sdp_with_media("video")) {
			return;
		}
		if($var(webrtc)==true) {
			xnotice("====== request - setting transcoding to PCMA\n");
			rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=ext direction=int generate-RTCP always-transcode codec-strip-full codec-transcode-PCMA");
		} else {
                	if (isflagset(FLAG_FROM_PEER)) {
				rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=ext direction=int generate-RTCP");
		    	} else {
				if(uri =~ ";transport=ws") {
					xnotice("====== request - setting transcoding to OPUS\n");
					rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=int direction=ext generate-RTCP SDES-off always-transcode codec-strip-full codec-transcode-OPUS/48000/2/16000");
				} else {
					rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=int direction=ext generate-RTCP");
				}
		    	}
		}
	}
#!endif
	return;
}

route[DISPATCH] {
	xinfo("DISPATCHER ROUTE\n");
	# - remove preloaded route headers
 	remove_hf("Route");

	if (is_method("INVITE|SUBSCRIBE|REGISTER|OPTIONS")) {
		if (isflagset(FLAG_FROM_PEER)) {
			xinfo("dispatching the INVITE to Asterisk $_s(sip:$rU@$fd)\n");
			if (!ds_select_dst("$var(dsgid)", "0")) {
				xlog("No dispatcher available\n");
				send_reply("404", "No destination");
				exit;
			}
		} else {
			contact_param_decode_ruri("wks");
			handle_ruri_alias();
			xinfo("Dispatching the INVITE to external peer $_s(sip:$rU@$rd:$rp)\n");
		}
		route(RTPENGINEREQ);
		# record routing for dialog forming requests (in case they are routed)
		if (is_method("INVITE|SUBSCRIBE")) {
			record_route();
		}

		route(RELAY);
	}
}

route[CHECK_SOURCE_IP] {
	if(ds_is_from_list("1", "3")) {
		setflag(FLAG_FROM_ASTERISK);
	} else {
		setflag(FLAG_FROM_PEER);
	}
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
}

# Manage incoming replies
reply_route {
	if ((($Rp == 8080) && !(proto == WS || proto == WSS))) {
		xwarn("SIP response received on $Rp\n");
		drop;
	}

	xdbg("reply route\n");
	if(!sanity_check("17604", "6")) {
		xlog("Malformed SIP response from $si:$sp\n");
		drop;
	}
	route(CHECK_SOURCE_IP);
	if(isflagset(FLAG_FROM_PEER)) {
		set_contact_alias();
	} else {
		if(is_method("REGISTER")) {
			if(search_hf("Contact", ";wks=", "a")) {
				contact_param_decode("wks");
				msg_apply_changes();
				contact_param_rm("alias");
			}
		}
	}
	return;
}

# Manage incoming replies in transaction context
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");

        if(sdp_with_transport("UDP/TLS/RTP/SAVPF")) {
		$var(webrtc) = true;
	} else {
		$var(webrtc) = false;
	}

	if (has_body("application/sdp")) { 
		if(sdp_with_media("video")) {
			return;
		}
		if(($var(webrtc)==true) && (proto==UDP)) {
			xnotice("====== response - setting transcoding to OPUS\n");
			rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=int direction=ext generate-RTCP always-transcode codec-strip-full codec-transcode-OPUS/48000/2/16000");
		} else {
			if(isflagset(FLAG_FROM_PEER)) {
				rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=int direction=ext generate-RTCP");
				xinfo("rtp_engine called for reply FLAG_FROM_PEER\n");
			} else {
				if(proto==WS || proto==WSS) {
					xnotice("====== response - setting transcoding to PCMA\n");
					rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=ext direction=int generate-RTCP always-transcode codec-strip-full codec-transcode-PCMA");
				} else {
					rtpengine_manage("SIP-source-address replace-origin replace-session-connection direction=ext direction=int generate-RTCP");
				}
				xinfo("rtp_engine called for reply FLAG_FROM_ASTERISK\n");
			}
                }
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {

	if (t_is_canceled()) exit;

#!ifdef WITH_BLOCK3XX
	# block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found");
		exit;
	}
#!endif

#!ifdef WITH_BLOCK401407
	# block call redirect based on 401, 407 replies.
	if (t_check_status("401|407")) {
		t_reply("404","Not found");
		exit;
	}
#!endif
}

#!ifdef WITH_WSS

event_route[xhttp:request] {
	xinfo("HTTP Request Received\n");

	set_reply_close();
	set_reply_no_connect();

	if ($Rp != 8080) {
		xwarn("HTTP request received on $Rp\n");
		xhttp_reply("403", "Forbidden", "", "");
		exit;
	}

	xdbg("HTTP Request Received\n");

	if ($hdr(Upgrade)=~"websocket" && $hdr(Connection)=~"Upgrade" && $rm=~"GET") {
		if (ws_handle_handshake()) {
			exit;
		}
	}

	xhttp_reply("404", "Not Found", "", "");
}

event_route[websocket:closed] {
	xinfo("WebSocket connection from $si:$sp has closed\n");
}
#!endif
